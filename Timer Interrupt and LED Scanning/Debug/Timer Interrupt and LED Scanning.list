
Timer Interrupt and LED Scanning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002844  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002974  08002974  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002974  08002974  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002974  08002974  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800297c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000048  080029c4  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080029c4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008896  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015fc  00000000  00000000  00028907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00029f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016368  00000000  00000000  0002b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096cd  00000000  00000000  00041508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008230a  00000000  00000000  0004abd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ccedf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  000ccf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002938 	.word	0x08002938

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002938 	.word	0x08002938

0800014c <display7SEG>:
int led_buffer[4] = {1, 2, 3, 4};
int hour = 15, minute = 8, second = 50;
const int MAX_LED = 4;
int index_led = 0;

void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	2101      	movs	r1, #1
 8000158:	48bf      	ldr	r0, [pc, #764]	; (8000458 <display7SEG+0x30c>)
 800015a:	f001 fbcb 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800015e:	2201      	movs	r2, #1
 8000160:	2102      	movs	r1, #2
 8000162:	48bd      	ldr	r0, [pc, #756]	; (8000458 <display7SEG+0x30c>)
 8000164:	f001 fbc6 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	48ba      	ldr	r0, [pc, #744]	; (8000458 <display7SEG+0x30c>)
 800016e:	f001 fbc1 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000172:	2201      	movs	r2, #1
 8000174:	2108      	movs	r1, #8
 8000176:	48b8      	ldr	r0, [pc, #736]	; (8000458 <display7SEG+0x30c>)
 8000178:	f001 fbbc 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 800017c:	2201      	movs	r2, #1
 800017e:	2110      	movs	r1, #16
 8000180:	48b5      	ldr	r0, [pc, #724]	; (8000458 <display7SEG+0x30c>)
 8000182:	f001 fbb7 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2120      	movs	r1, #32
 800018a:	48b3      	ldr	r0, [pc, #716]	; (8000458 <display7SEG+0x30c>)
 800018c:	f001 fbb2 	bl	80018f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	48b0      	ldr	r0, [pc, #704]	; (8000458 <display7SEG+0x30c>)
 8000196:	f001 fbad 	bl	80018f4 <HAL_GPIO_WritePin>
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b09      	cmp	r3, #9
 800019e:	f200 8181 	bhi.w	80004a4 <display7SEG+0x358>
 80001a2:	a201      	add	r2, pc, #4	; (adr r2, 80001a8 <display7SEG+0x5c>)
 80001a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a8:	080001d1 	.word	0x080001d1
 80001ac:	08000219 	.word	0x08000219
 80001b0:	08000261 	.word	0x08000261
 80001b4:	080002a9 	.word	0x080002a9
 80001b8:	080002f1 	.word	0x080002f1
 80001bc:	08000339 	.word	0x08000339
 80001c0:	08000381 	.word	0x08000381
 80001c4:	080003c9 	.word	0x080003c9
 80001c8:	08000411 	.word	0x08000411
 80001cc:	0800045d 	.word	0x0800045d

	switch(num) {
		case 0:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2101      	movs	r1, #1
 80001d4:	48a0      	ldr	r0, [pc, #640]	; (8000458 <display7SEG+0x30c>)
 80001d6:	f001 fb8d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2102      	movs	r1, #2
 80001de:	489e      	ldr	r0, [pc, #632]	; (8000458 <display7SEG+0x30c>)
 80001e0:	f001 fb88 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2104      	movs	r1, #4
 80001e8:	489b      	ldr	r0, [pc, #620]	; (8000458 <display7SEG+0x30c>)
 80001ea:	f001 fb83 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	2108      	movs	r1, #8
 80001f2:	4899      	ldr	r0, [pc, #612]	; (8000458 <display7SEG+0x30c>)
 80001f4:	f001 fb7e 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2110      	movs	r1, #16
 80001fc:	4896      	ldr	r0, [pc, #600]	; (8000458 <display7SEG+0x30c>)
 80001fe:	f001 fb79 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	4894      	ldr	r0, [pc, #592]	; (8000458 <display7SEG+0x30c>)
 8000208:	f001 fb74 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	2140      	movs	r1, #64	; 0x40
 8000210:	4891      	ldr	r0, [pc, #580]	; (8000458 <display7SEG+0x30c>)
 8000212:	f001 fb6f 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000216:	e146      	b.n	80004a6 <display7SEG+0x35a>
		case 1:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	2101      	movs	r1, #1
 800021c:	488e      	ldr	r0, [pc, #568]	; (8000458 <display7SEG+0x30c>)
 800021e:	f001 fb69 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2102      	movs	r1, #2
 8000226:	488c      	ldr	r0, [pc, #560]	; (8000458 <display7SEG+0x30c>)
 8000228:	f001 fb64 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	2104      	movs	r1, #4
 8000230:	4889      	ldr	r0, [pc, #548]	; (8000458 <display7SEG+0x30c>)
 8000232:	f001 fb5f 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2108      	movs	r1, #8
 800023a:	4887      	ldr	r0, [pc, #540]	; (8000458 <display7SEG+0x30c>)
 800023c:	f001 fb5a 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	2110      	movs	r1, #16
 8000244:	4884      	ldr	r0, [pc, #528]	; (8000458 <display7SEG+0x30c>)
 8000246:	f001 fb55 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 800024a:	2201      	movs	r2, #1
 800024c:	2120      	movs	r1, #32
 800024e:	4882      	ldr	r0, [pc, #520]	; (8000458 <display7SEG+0x30c>)
 8000250:	f001 fb50 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2140      	movs	r1, #64	; 0x40
 8000258:	487f      	ldr	r0, [pc, #508]	; (8000458 <display7SEG+0x30c>)
 800025a:	f001 fb4b 	bl	80018f4 <HAL_GPIO_WritePin>
		// (Add the rest of the pins needed to display '1')
		break;
 800025e:	e122      	b.n	80004a6 <display7SEG+0x35a>
		case 2:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2101      	movs	r1, #1
 8000264:	487c      	ldr	r0, [pc, #496]	; (8000458 <display7SEG+0x30c>)
 8000266:	f001 fb45 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	2102      	movs	r1, #2
 800026e:	487a      	ldr	r0, [pc, #488]	; (8000458 <display7SEG+0x30c>)
 8000270:	f001 fb40 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2104      	movs	r1, #4
 8000278:	4877      	ldr	r0, [pc, #476]	; (8000458 <display7SEG+0x30c>)
 800027a:	f001 fb3b 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2108      	movs	r1, #8
 8000282:	4875      	ldr	r0, [pc, #468]	; (8000458 <display7SEG+0x30c>)
 8000284:	f001 fb36 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	4872      	ldr	r0, [pc, #456]	; (8000458 <display7SEG+0x30c>)
 800028e:	f001 fb31 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 8000292:	2201      	movs	r2, #1
 8000294:	2120      	movs	r1, #32
 8000296:	4870      	ldr	r0, [pc, #448]	; (8000458 <display7SEG+0x30c>)
 8000298:	f001 fb2c 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2140      	movs	r1, #64	; 0x40
 80002a0:	486d      	ldr	r0, [pc, #436]	; (8000458 <display7SEG+0x30c>)
 80002a2:	f001 fb27 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 80002a6:	e0fe      	b.n	80004a6 <display7SEG+0x35a>
		case 3:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2101      	movs	r1, #1
 80002ac:	486a      	ldr	r0, [pc, #424]	; (8000458 <display7SEG+0x30c>)
 80002ae:	f001 fb21 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2102      	movs	r1, #2
 80002b6:	4868      	ldr	r0, [pc, #416]	; (8000458 <display7SEG+0x30c>)
 80002b8:	f001 fb1c 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2104      	movs	r1, #4
 80002c0:	4865      	ldr	r0, [pc, #404]	; (8000458 <display7SEG+0x30c>)
 80002c2:	f001 fb17 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2108      	movs	r1, #8
 80002ca:	4863      	ldr	r0, [pc, #396]	; (8000458 <display7SEG+0x30c>)
 80002cc:	f001 fb12 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2110      	movs	r1, #16
 80002d4:	4860      	ldr	r0, [pc, #384]	; (8000458 <display7SEG+0x30c>)
 80002d6:	f001 fb0d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	2120      	movs	r1, #32
 80002de:	485e      	ldr	r0, [pc, #376]	; (8000458 <display7SEG+0x30c>)
 80002e0:	f001 fb08 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2140      	movs	r1, #64	; 0x40
 80002e8:	485b      	ldr	r0, [pc, #364]	; (8000458 <display7SEG+0x30c>)
 80002ea:	f001 fb03 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 80002ee:	e0da      	b.n	80004a6 <display7SEG+0x35a>
		case 4:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4858      	ldr	r0, [pc, #352]	; (8000458 <display7SEG+0x30c>)
 80002f6:	f001 fafd 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2102      	movs	r1, #2
 80002fe:	4856      	ldr	r0, [pc, #344]	; (8000458 <display7SEG+0x30c>)
 8000300:	f001 faf8 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2104      	movs	r1, #4
 8000308:	4853      	ldr	r0, [pc, #332]	; (8000458 <display7SEG+0x30c>)
 800030a:	f001 faf3 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2108      	movs	r1, #8
 8000312:	4851      	ldr	r0, [pc, #324]	; (8000458 <display7SEG+0x30c>)
 8000314:	f001 faee 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2110      	movs	r1, #16
 800031c:	484e      	ldr	r0, [pc, #312]	; (8000458 <display7SEG+0x30c>)
 800031e:	f001 fae9 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2120      	movs	r1, #32
 8000326:	484c      	ldr	r0, [pc, #304]	; (8000458 <display7SEG+0x30c>)
 8000328:	f001 fae4 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2140      	movs	r1, #64	; 0x40
 8000330:	4849      	ldr	r0, [pc, #292]	; (8000458 <display7SEG+0x30c>)
 8000332:	f001 fadf 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000336:	e0b6      	b.n	80004a6 <display7SEG+0x35a>
		case 5:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	4846      	ldr	r0, [pc, #280]	; (8000458 <display7SEG+0x30c>)
 800033e:	f001 fad9 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2102      	movs	r1, #2
 8000346:	4844      	ldr	r0, [pc, #272]	; (8000458 <display7SEG+0x30c>)
 8000348:	f001 fad4 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2104      	movs	r1, #4
 8000350:	4841      	ldr	r0, [pc, #260]	; (8000458 <display7SEG+0x30c>)
 8000352:	f001 facf 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2108      	movs	r1, #8
 800035a:	483f      	ldr	r0, [pc, #252]	; (8000458 <display7SEG+0x30c>)
 800035c:	f001 faca 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2110      	movs	r1, #16
 8000364:	483c      	ldr	r0, [pc, #240]	; (8000458 <display7SEG+0x30c>)
 8000366:	f001 fac5 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	2120      	movs	r1, #32
 800036e:	483a      	ldr	r0, [pc, #232]	; (8000458 <display7SEG+0x30c>)
 8000370:	f001 fac0 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4837      	ldr	r0, [pc, #220]	; (8000458 <display7SEG+0x30c>)
 800037a:	f001 fabb 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 800037e:	e092      	b.n	80004a6 <display7SEG+0x35a>
		case 6:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2101      	movs	r1, #1
 8000384:	4834      	ldr	r0, [pc, #208]	; (8000458 <display7SEG+0x30c>)
 8000386:	f001 fab5 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2102      	movs	r1, #2
 800038e:	4832      	ldr	r0, [pc, #200]	; (8000458 <display7SEG+0x30c>)
 8000390:	f001 fab0 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2104      	movs	r1, #4
 8000398:	482f      	ldr	r0, [pc, #188]	; (8000458 <display7SEG+0x30c>)
 800039a:	f001 faab 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2108      	movs	r1, #8
 80003a2:	482d      	ldr	r0, [pc, #180]	; (8000458 <display7SEG+0x30c>)
 80003a4:	f001 faa6 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2110      	movs	r1, #16
 80003ac:	482a      	ldr	r0, [pc, #168]	; (8000458 <display7SEG+0x30c>)
 80003ae:	f001 faa1 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2120      	movs	r1, #32
 80003b6:	4828      	ldr	r0, [pc, #160]	; (8000458 <display7SEG+0x30c>)
 80003b8:	f001 fa9c 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2140      	movs	r1, #64	; 0x40
 80003c0:	4825      	ldr	r0, [pc, #148]	; (8000458 <display7SEG+0x30c>)
 80003c2:	f001 fa97 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 80003c6:	e06e      	b.n	80004a6 <display7SEG+0x35a>
		case 7:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2101      	movs	r1, #1
 80003cc:	4822      	ldr	r0, [pc, #136]	; (8000458 <display7SEG+0x30c>)
 80003ce:	f001 fa91 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2102      	movs	r1, #2
 80003d6:	4820      	ldr	r0, [pc, #128]	; (8000458 <display7SEG+0x30c>)
 80003d8:	f001 fa8c 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2104      	movs	r1, #4
 80003e0:	481d      	ldr	r0, [pc, #116]	; (8000458 <display7SEG+0x30c>)
 80003e2:	f001 fa87 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2108      	movs	r1, #8
 80003ea:	481b      	ldr	r0, [pc, #108]	; (8000458 <display7SEG+0x30c>)
 80003ec:	f001 fa82 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	2110      	movs	r1, #16
 80003f4:	4818      	ldr	r0, [pc, #96]	; (8000458 <display7SEG+0x30c>)
 80003f6:	f001 fa7d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	2120      	movs	r1, #32
 80003fe:	4816      	ldr	r0, [pc, #88]	; (8000458 <display7SEG+0x30c>)
 8000400:	f001 fa78 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2140      	movs	r1, #64	; 0x40
 8000408:	4813      	ldr	r0, [pc, #76]	; (8000458 <display7SEG+0x30c>)
 800040a:	f001 fa73 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 800040e:	e04a      	b.n	80004a6 <display7SEG+0x35a>
		case 8:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4810      	ldr	r0, [pc, #64]	; (8000458 <display7SEG+0x30c>)
 8000416:	f001 fa6d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2102      	movs	r1, #2
 800041e:	480e      	ldr	r0, [pc, #56]	; (8000458 <display7SEG+0x30c>)
 8000420:	f001 fa68 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2104      	movs	r1, #4
 8000428:	480b      	ldr	r0, [pc, #44]	; (8000458 <display7SEG+0x30c>)
 800042a:	f001 fa63 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2108      	movs	r1, #8
 8000432:	4809      	ldr	r0, [pc, #36]	; (8000458 <display7SEG+0x30c>)
 8000434:	f001 fa5e 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2110      	movs	r1, #16
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <display7SEG+0x30c>)
 800043e:	f001 fa59 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2120      	movs	r1, #32
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <display7SEG+0x30c>)
 8000448:	f001 fa54 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2140      	movs	r1, #64	; 0x40
 8000450:	4801      	ldr	r0, [pc, #4]	; (8000458 <display7SEG+0x30c>)
 8000452:	f001 fa4f 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000456:	e026      	b.n	80004a6 <display7SEG+0x35a>
 8000458:	40010c00 	.word	0x40010c00
		case 9:
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2101      	movs	r1, #1
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <display7SEG+0x364>)
 8000462:	f001 fa47 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2102      	movs	r1, #2
 800046a:	4811      	ldr	r0, [pc, #68]	; (80004b0 <display7SEG+0x364>)
 800046c:	f001 fa42 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2104      	movs	r1, #4
 8000474:	480e      	ldr	r0, [pc, #56]	; (80004b0 <display7SEG+0x364>)
 8000476:	f001 fa3d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2108      	movs	r1, #8
 800047e:	480c      	ldr	r0, [pc, #48]	; (80004b0 <display7SEG+0x364>)
 8000480:	f001 fa38 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2110      	movs	r1, #16
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <display7SEG+0x364>)
 800048a:	f001 fa33 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	2120      	movs	r1, #32
 8000492:	4807      	ldr	r0, [pc, #28]	; (80004b0 <display7SEG+0x364>)
 8000494:	f001 fa2e 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, GPIO_PIN_RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	4804      	ldr	r0, [pc, #16]	; (80004b0 <display7SEG+0x364>)
 800049e:	f001 fa29 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 80004a2:	e000      	b.n	80004a6 <display7SEG+0x35a>
		default:
		// Handle invalid input by possibly clearing all segments or displaying a predefined error state
		break;
 80004a4:	bf00      	nop
	}
	return;
 80004a6:	bf00      	nop
}
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <update7SEG>:
void update7SEG(int index){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	if(index_led>MAX_LED) index_led = (index_led + 1) % MAX_LED;
 80004bc:	4b49      	ldr	r3, [pc, #292]	; (80005e4 <update7SEG+0x130>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2204      	movs	r2, #4
 80004c2:	4293      	cmp	r3, r2
 80004c4:	dd0a      	ble.n	80004dc <update7SEG+0x28>
 80004c6:	4b47      	ldr	r3, [pc, #284]	; (80005e4 <update7SEG+0x130>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	2204      	movs	r2, #4
 80004ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80004d2:	fb02 f201 	mul.w	r2, r2, r1
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4a42      	ldr	r2, [pc, #264]	; (80005e4 <update7SEG+0x130>)
 80004da:	6013      	str	r3, [r2, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d87a      	bhi.n	80005d8 <update7SEG+0x124>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <update7SEG+0x34>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	080004f9 	.word	0x080004f9
 80004ec:	08000531 	.word	0x08000531
 80004f0:	08000569 	.word	0x08000569
 80004f4:	080005a1 	.word	0x080005a1
    switch (index){
        case 0:
            //Display the first 7SEG with led_buffer[0]
    		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2140      	movs	r1, #64	; 0x40
 80004fc:	483a      	ldr	r0, [pc, #232]	; (80005e8 <update7SEG+0x134>)
 80004fe:	f001 f9f9 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	4838      	ldr	r0, [pc, #224]	; (80005e8 <update7SEG+0x134>)
 8000508:	f001 f9f4 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000512:	4835      	ldr	r0, [pc, #212]	; (80005e8 <update7SEG+0x134>)
 8000514:	f001 f9ee 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051e:	4832      	ldr	r0, [pc, #200]	; (80005e8 <update7SEG+0x134>)
 8000520:	f001 f9e8 	bl	80018f4 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[0]);
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <update7SEG+0x138>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe0f 	bl	800014c <display7SEG>
            break;
 800052e:	e054      	b.n	80005da <update7SEG+0x126>
        case 1:
            //Display the second 7SEG with led_buffer[1]
    		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	482c      	ldr	r0, [pc, #176]	; (80005e8 <update7SEG+0x134>)
 8000536:	f001 f9dd 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	482a      	ldr	r0, [pc, #168]	; (80005e8 <update7SEG+0x134>)
 8000540:	f001 f9d8 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	4827      	ldr	r0, [pc, #156]	; (80005e8 <update7SEG+0x134>)
 800054c:	f001 f9d2 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000556:	4824      	ldr	r0, [pc, #144]	; (80005e8 <update7SEG+0x134>)
 8000558:	f001 f9cc 	bl	80018f4 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[1]);
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <update7SEG+0x138>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fdf3 	bl	800014c <display7SEG>
            break;
 8000566:	e038      	b.n	80005da <update7SEG+0x126>
        case 2:
            //Display the third 7SEG with led_buffer[2]
    		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	481e      	ldr	r0, [pc, #120]	; (80005e8 <update7SEG+0x134>)
 800056e:	f001 f9c1 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	481c      	ldr	r0, [pc, #112]	; (80005e8 <update7SEG+0x134>)
 8000578:	f001 f9bc 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4819      	ldr	r0, [pc, #100]	; (80005e8 <update7SEG+0x134>)
 8000584:	f001 f9b6 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058e:	4816      	ldr	r0, [pc, #88]	; (80005e8 <update7SEG+0x134>)
 8000590:	f001 f9b0 	bl	80018f4 <HAL_GPIO_WritePin>
        	display7SEG(led_buffer[2]);
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <update7SEG+0x138>)
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fdd7 	bl	800014c <display7SEG>
        	break;
 800059e:	e01c      	b.n	80005da <update7SEG+0x126>
        case 3:
        	display7SEG(led_buffer[3]);
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <update7SEG+0x138>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fdd1 	bl	800014c <display7SEG>
            //Display the forth 7SEG with led_buffer[3]
    		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <update7SEG+0x134>)
 80005b0:	f001 f9a0 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <update7SEG+0x134>)
 80005ba:	f001 f99b 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <update7SEG+0x134>)
 80005c6:	f001 f995 	bl	80018f4 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <update7SEG+0x134>)
 80005d2:	f001 f98f 	bl	80018f4 <HAL_GPIO_WritePin>
            break;
 80005d6:	e000      	b.n	80005da <update7SEG+0x126>
        default:
            break;
 80005d8:	bf00      	nop
    }
    return;
 80005da:	bf00      	nop
}
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000064 	.word	0x20000064
 80005e8:	40010800 	.word	0x40010800
 80005ec:	20000000 	.word	0x20000000

080005f0 <updateClockBuffer>:

void updateClockBuffer(int hour, int minute, int second){
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
//    led_buffer[0] = hour/10;
//    led_buffer[1] = hour%10;
//    led_buffer[2] = minute/10;
//    led_buffer[3] = minute%10;
    led_buffer[0] = minute/10;
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <updateClockBuffer+0x74>)
 8000600:	fb82 1203 	smull	r1, r2, r2, r3
 8000604:	1092      	asrs	r2, r2, #2
 8000606:	17db      	asrs	r3, r3, #31
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <updateClockBuffer+0x78>)
 800060c:	6013      	str	r3, [r2, #0]
    led_buffer[1] = minute%10;
 800060e:	68b9      	ldr	r1, [r7, #8]
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <updateClockBuffer+0x74>)
 8000612:	fb83 2301 	smull	r2, r3, r3, r1
 8000616:	109a      	asrs	r2, r3, #2
 8000618:	17cb      	asrs	r3, r1, #31
 800061a:	1ad2      	subs	r2, r2, r3
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	1aca      	subs	r2, r1, r3
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <updateClockBuffer+0x78>)
 8000628:	605a      	str	r2, [r3, #4]
    led_buffer[2] = second/10;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <updateClockBuffer+0x74>)
 800062e:	fb82 1203 	smull	r1, r2, r2, r3
 8000632:	1092      	asrs	r2, r2, #2
 8000634:	17db      	asrs	r3, r3, #31
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <updateClockBuffer+0x78>)
 800063a:	6093      	str	r3, [r2, #8]
    led_buffer[3] = second%10;
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <updateClockBuffer+0x74>)
 8000640:	fb83 2301 	smull	r2, r3, r3, r1
 8000644:	109a      	asrs	r2, r3, #2
 8000646:	17cb      	asrs	r3, r1, #31
 8000648:	1ad2      	subs	r2, r2, r3
 800064a:	4613      	mov	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1aca      	subs	r2, r1, r3
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <updateClockBuffer+0x78>)
 8000656:	60da      	str	r2, [r3, #12]
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	66666667 	.word	0x66666667
 8000668:	20000000 	.word	0x20000000

0800066c <displayLEDMatrix>:

const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
void displayLEDMatrix(uint8_t value) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	switch(value) {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2bc0      	cmp	r3, #192	; 0xc0
 800067a:	d03e      	beq.n	80006fa <displayLEDMatrix+0x8e>
 800067c:	2bc0      	cmp	r3, #192	; 0xc0
 800067e:	f300 80cf 	bgt.w	8000820 <displayLEDMatrix+0x1b4>
 8000682:	2b80      	cmp	r3, #128	; 0x80
 8000684:	d06a      	beq.n	800075c <displayLEDMatrix+0xf0>
 8000686:	2b80      	cmp	r3, #128	; 0x80
 8000688:	f300 80ca 	bgt.w	8000820 <displayLEDMatrix+0x1b4>
 800068c:	2b00      	cmp	r3, #0
 800068e:	d003      	beq.n	8000698 <displayLEDMatrix+0x2c>
 8000690:	2b33      	cmp	r3, #51	; 0x33
 8000692:	f000 8094 	beq.w	80007be <displayLEDMatrix+0x152>
 8000696:	e0c3      	b.n	8000820 <displayLEDMatrix+0x1b4>
	case 0x00:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	487b      	ldr	r0, [pc, #492]	; (800088c <displayLEDMatrix+0x220>)
 80006a0:	f001 f928 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006aa:	4878      	ldr	r0, [pc, #480]	; (800088c <displayLEDMatrix+0x220>)
 80006ac:	f001 f922 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	4875      	ldr	r0, [pc, #468]	; (800088c <displayLEDMatrix+0x220>)
 80006b8:	f001 f91c 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4872      	ldr	r0, [pc, #456]	; (800088c <displayLEDMatrix+0x220>)
 80006c4:	f001 f916 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	486f      	ldr	r0, [pc, #444]	; (800088c <displayLEDMatrix+0x220>)
 80006d0:	f001 f910 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	486c      	ldr	r0, [pc, #432]	; (800088c <displayLEDMatrix+0x220>)
 80006dc:	f001 f90a 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e6:	4869      	ldr	r0, [pc, #420]	; (800088c <displayLEDMatrix+0x220>)
 80006e8:	f001 f904 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f2:	4866      	ldr	r0, [pc, #408]	; (800088c <displayLEDMatrix+0x220>)
 80006f4:	f001 f8fe 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 80006f8:	e0c3      	b.n	8000882 <displayLEDMatrix+0x216>
	case 0xc0:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	4862      	ldr	r0, [pc, #392]	; (800088c <displayLEDMatrix+0x220>)
 8000702:	f001 f8f7 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	485f      	ldr	r0, [pc, #380]	; (800088c <displayLEDMatrix+0x220>)
 800070e:	f001 f8f1 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	485c      	ldr	r0, [pc, #368]	; (800088c <displayLEDMatrix+0x220>)
 800071a:	f001 f8eb 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000724:	4859      	ldr	r0, [pc, #356]	; (800088c <displayLEDMatrix+0x220>)
 8000726:	f001 f8e5 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000730:	4856      	ldr	r0, [pc, #344]	; (800088c <displayLEDMatrix+0x220>)
 8000732:	f001 f8df 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	4853      	ldr	r0, [pc, #332]	; (800088c <displayLEDMatrix+0x220>)
 800073e:	f001 f8d9 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000748:	4850      	ldr	r0, [pc, #320]	; (800088c <displayLEDMatrix+0x220>)
 800074a:	f001 f8d3 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000754:	484d      	ldr	r0, [pc, #308]	; (800088c <displayLEDMatrix+0x220>)
 8000756:	f001 f8cd 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 800075a:	e092      	b.n	8000882 <displayLEDMatrix+0x216>
	case 0x80:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000762:	484a      	ldr	r0, [pc, #296]	; (800088c <displayLEDMatrix+0x220>)
 8000764:	f001 f8c6 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	4847      	ldr	r0, [pc, #284]	; (800088c <displayLEDMatrix+0x220>)
 8000770:	f001 f8c0 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800077a:	4844      	ldr	r0, [pc, #272]	; (800088c <displayLEDMatrix+0x220>)
 800077c:	f001 f8ba 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000786:	4841      	ldr	r0, [pc, #260]	; (800088c <displayLEDMatrix+0x220>)
 8000788:	f001 f8b4 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000792:	483e      	ldr	r0, [pc, #248]	; (800088c <displayLEDMatrix+0x220>)
 8000794:	f001 f8ae 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079e:	483b      	ldr	r0, [pc, #236]	; (800088c <displayLEDMatrix+0x220>)
 80007a0:	f001 f8a8 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007aa:	4838      	ldr	r0, [pc, #224]	; (800088c <displayLEDMatrix+0x220>)
 80007ac:	f001 f8a2 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b6:	4835      	ldr	r0, [pc, #212]	; (800088c <displayLEDMatrix+0x220>)
 80007b8:	f001 f89c 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 80007bc:	e061      	b.n	8000882 <displayLEDMatrix+0x216>
	case 0x33:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c4:	4831      	ldr	r0, [pc, #196]	; (800088c <displayLEDMatrix+0x220>)
 80007c6:	f001 f895 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d0:	482e      	ldr	r0, [pc, #184]	; (800088c <displayLEDMatrix+0x220>)
 80007d2:	f001 f88f 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007dc:	482b      	ldr	r0, [pc, #172]	; (800088c <displayLEDMatrix+0x220>)
 80007de:	f001 f889 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e8:	4828      	ldr	r0, [pc, #160]	; (800088c <displayLEDMatrix+0x220>)
 80007ea:	f001 f883 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <displayLEDMatrix+0x220>)
 80007f6:	f001 f87d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <displayLEDMatrix+0x220>)
 8000802:	f001 f877 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	481f      	ldr	r0, [pc, #124]	; (800088c <displayLEDMatrix+0x220>)
 800080e:	f001 f871 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	481c      	ldr	r0, [pc, #112]	; (800088c <displayLEDMatrix+0x220>)
 800081a:	f001 f86b 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 800081e:	e030      	b.n	8000882 <displayLEDMatrix+0x216>
	default:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	4819      	ldr	r0, [pc, #100]	; (800088c <displayLEDMatrix+0x220>)
 8000828:	f001 f864 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000832:	4816      	ldr	r0, [pc, #88]	; (800088c <displayLEDMatrix+0x220>)
 8000834:	f001 f85e 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083e:	4813      	ldr	r0, [pc, #76]	; (800088c <displayLEDMatrix+0x220>)
 8000840:	f001 f858 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <displayLEDMatrix+0x220>)
 800084c:	f001 f852 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <displayLEDMatrix+0x220>)
 8000858:	f001 f84c 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <displayLEDMatrix+0x220>)
 8000864:	f001 f846 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <displayLEDMatrix+0x220>)
 8000870:	f001 f840 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <displayLEDMatrix+0x220>)
 800087c:	f001 f83a 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000880:	bf00      	nop
	}
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010c00 	.word	0x40010c00

08000890 <updateLEDMatrix>:
void updateLEDMatrix(int index) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b07      	cmp	r3, #7
 800089c:	f200 818e 	bhi.w	8000bbc <updateLEDMatrix+0x32c>
 80008a0:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <updateLEDMatrix+0x18>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008c9 	.word	0x080008c9
 80008ac:	08000927 	.word	0x08000927
 80008b0:	08000985 	.word	0x08000985
 80008b4:	080009e3 	.word	0x080009e3
 80008b8:	08000a41 	.word	0x08000a41
 80008bc:	08000a9f 	.word	0x08000a9f
 80008c0:	08000afd 	.word	0x08000afd
 80008c4:	08000b5b 	.word	0x08000b5b
	switch(index) {
		case 0:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2104      	movs	r1, #4
 80008cc:	48ba      	ldr	r0, [pc, #744]	; (8000bb8 <updateLEDMatrix+0x328>)
 80008ce:	f001 f811 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2108      	movs	r1, #8
 80008d6:	48b8      	ldr	r0, [pc, #736]	; (8000bb8 <updateLEDMatrix+0x328>)
 80008d8:	f001 f80c 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e2:	48b5      	ldr	r0, [pc, #724]	; (8000bb8 <updateLEDMatrix+0x328>)
 80008e4:	f001 f806 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ee:	48b2      	ldr	r0, [pc, #712]	; (8000bb8 <updateLEDMatrix+0x328>)
 80008f0:	f001 f800 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fa:	48af      	ldr	r0, [pc, #700]	; (8000bb8 <updateLEDMatrix+0x328>)
 80008fc:	f000 fffa 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	48ac      	ldr	r0, [pc, #688]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000908:	f000 fff4 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000912:	48a9      	ldr	r0, [pc, #676]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000914:	f000 ffee 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800091e:	48a6      	ldr	r0, [pc, #664]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000920:	f000 ffe8 	bl	80018f4 <HAL_GPIO_WritePin>

			break;
 8000924:	e179      	b.n	8000c1a <updateLEDMatrix+0x38a>
		case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000926:	2201      	movs	r2, #1
 8000928:	2104      	movs	r1, #4
 800092a:	48a3      	ldr	r0, [pc, #652]	; (8000bb8 <updateLEDMatrix+0x328>)
 800092c:	f000 ffe2 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2108      	movs	r1, #8
 8000934:	48a0      	ldr	r0, [pc, #640]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000936:	f000 ffdd 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000940:	489d      	ldr	r0, [pc, #628]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000942:	f000 ffd7 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000946:	2201      	movs	r2, #1
 8000948:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094c:	489a      	ldr	r0, [pc, #616]	; (8000bb8 <updateLEDMatrix+0x328>)
 800094e:	f000 ffd1 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000958:	4897      	ldr	r0, [pc, #604]	; (8000bb8 <updateLEDMatrix+0x328>)
 800095a:	f000 ffcb 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000964:	4894      	ldr	r0, [pc, #592]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000966:	f000 ffc5 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000970:	4891      	ldr	r0, [pc, #580]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000972:	f000 ffbf 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	488e      	ldr	r0, [pc, #568]	; (8000bb8 <updateLEDMatrix+0x328>)
 800097e:	f000 ffb9 	bl	80018f4 <HAL_GPIO_WritePin>


			break;
 8000982:	e14a      	b.n	8000c1a <updateLEDMatrix+0x38a>
		case 2:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2104      	movs	r1, #4
 8000988:	488b      	ldr	r0, [pc, #556]	; (8000bb8 <updateLEDMatrix+0x328>)
 800098a:	f000 ffb3 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2108      	movs	r1, #8
 8000992:	4889      	ldr	r0, [pc, #548]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000994:	f000 ffae 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099e:	4886      	ldr	r0, [pc, #536]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009a0:	f000 ffa8 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009aa:	4883      	ldr	r0, [pc, #524]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009ac:	f000 ffa2 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b6:	4880      	ldr	r0, [pc, #512]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009b8:	f000 ff9c 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c2:	487d      	ldr	r0, [pc, #500]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009c4:	f000 ff96 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ce:	487a      	ldr	r0, [pc, #488]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009d0:	f000 ff90 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009da:	4877      	ldr	r0, [pc, #476]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009dc:	f000 ff8a 	bl	80018f4 <HAL_GPIO_WritePin>
			break;
 80009e0:	e11b      	b.n	8000c1a <updateLEDMatrix+0x38a>
		case 3:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2104      	movs	r1, #4
 80009e6:	4874      	ldr	r0, [pc, #464]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009e8:	f000 ff84 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2108      	movs	r1, #8
 80009f0:	4871      	ldr	r0, [pc, #452]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009f2:	f000 ff7f 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fc:	486e      	ldr	r0, [pc, #440]	; (8000bb8 <updateLEDMatrix+0x328>)
 80009fe:	f000 ff79 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a08:	486b      	ldr	r0, [pc, #428]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a0a:	f000 ff73 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a14:	4868      	ldr	r0, [pc, #416]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a16:	f000 ff6d 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a20:	4865      	ldr	r0, [pc, #404]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a22:	f000 ff67 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2c:	4862      	ldr	r0, [pc, #392]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a2e:	f000 ff61 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a38:	485f      	ldr	r0, [pc, #380]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a3a:	f000 ff5b 	bl	80018f4 <HAL_GPIO_WritePin>
			break;
 8000a3e:	e0ec      	b.n	8000c1a <updateLEDMatrix+0x38a>
		case 4:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2104      	movs	r1, #4
 8000a44:	485c      	ldr	r0, [pc, #368]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a46:	f000 ff55 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	485a      	ldr	r0, [pc, #360]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a50:	f000 ff50 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	4857      	ldr	r0, [pc, #348]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a5c:	f000 ff4a 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a66:	4854      	ldr	r0, [pc, #336]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a68:	f000 ff44 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a72:	4851      	ldr	r0, [pc, #324]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a74:	f000 ff3e 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	484e      	ldr	r0, [pc, #312]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a80:	f000 ff38 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8a:	484b      	ldr	r0, [pc, #300]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a8c:	f000 ff32 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a96:	4848      	ldr	r0, [pc, #288]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000a98:	f000 ff2c 	bl	80018f4 <HAL_GPIO_WritePin>
			break;
 8000a9c:	e0bd      	b.n	8000c1a <updateLEDMatrix+0x38a>
		case 5:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4845      	ldr	r0, [pc, #276]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000aa4:	f000 ff26 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2108      	movs	r1, #8
 8000aac:	4842      	ldr	r0, [pc, #264]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000aae:	f000 ff21 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	483f      	ldr	r0, [pc, #252]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000aba:	f000 ff1b 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac4:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000ac6:	f000 ff15 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad0:	4839      	ldr	r0, [pc, #228]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000ad2:	f000 ff0f 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000ade:	f000 ff09 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae8:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000aea:	f000 ff03 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af4:	4830      	ldr	r0, [pc, #192]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000af6:	f000 fefd 	bl	80018f4 <HAL_GPIO_WritePin>
			break;
 8000afa:	e08e      	b.n	8000c1a <updateLEDMatrix+0x38a>
		case 6:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	2104      	movs	r1, #4
 8000b00:	482d      	ldr	r0, [pc, #180]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b02:	f000 fef7 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2108      	movs	r1, #8
 8000b0a:	482b      	ldr	r0, [pc, #172]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b0c:	f000 fef2 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	4828      	ldr	r0, [pc, #160]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b18:	f000 feec 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b22:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b24:	f000 fee6 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2e:	4822      	ldr	r0, [pc, #136]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b30:	f000 fee0 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3a:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b3c:	f000 feda 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b48:	f000 fed4 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b54:	f000 fece 	bl	80018f4 <HAL_GPIO_WritePin>
			break;
 8000b58:	e05f      	b.n	8000c1a <updateLEDMatrix+0x38a>
		case 7:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b60:	f000 fec8 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2108      	movs	r1, #8
 8000b68:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b6a:	f000 fec3 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b74:	4810      	ldr	r0, [pc, #64]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b76:	f000 febd 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b82:	f000 feb7 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b8e:	f000 feb1 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000b9a:	f000 feab 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000ba6:	f000 fea5 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb0:	4801      	ldr	r0, [pc, #4]	; (8000bb8 <updateLEDMatrix+0x328>)
 8000bb2:	f000 fe9f 	bl	80018f4 <HAL_GPIO_WritePin>
			break;
 8000bb6:	e030      	b.n	8000c1a <updateLEDMatrix+0x38a>
 8000bb8:	40010800 	.word	0x40010800
		default:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	481b      	ldr	r0, [pc, #108]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000bc2:	f000 fe97 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4819      	ldr	r0, [pc, #100]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000bcc:	f000 fe92 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd6:	4816      	ldr	r0, [pc, #88]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000bd8:	f000 fe8c 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000be4:	f000 fe86 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000bf0:	f000 fe80 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000bfc:	f000 fe7a 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000c08:	f000 fe74 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <updateLEDMatrix+0x3a0>)
 8000c14:	f000 fe6e 	bl	80018f4 <HAL_GPIO_WritePin>
			break;
 8000c18:	bf00      	nop
	}
	displayLEDMatrix(matrix_buffer[index]);
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <updateLEDMatrix+0x3a4>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fd22 	bl	800066c <displayLEDMatrix>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010800 	.word	0x40010800
 8000c34:	2000001c 	.word	0x2000001c

08000c38 <updateMatrix_Buffer>:
void updateMatrix_Buffer(){
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0

	uint8_t temp  = matrix_buffer[0];
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <updateMatrix_Buffer+0x40>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i<7;i++){
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	e00b      	b.n	8000c62 <updateMatrix_Buffer+0x2a>
		matrix_buffer[i] = matrix_buffer[i+1];
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <updateMatrix_Buffer+0x40>)
 8000c50:	5cd1      	ldrb	r1, [r2, r3]
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <updateMatrix_Buffer+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	460a      	mov	r2, r1
 8000c5a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<7;i++){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	ddf0      	ble.n	8000c4a <updateMatrix_Buffer+0x12>
	}
	matrix_buffer[7] = temp;
 8000c68:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <updateMatrix_Buffer+0x40>)
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	71d3      	strb	r3, [r2, #7]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	2000001c 	.word	0x2000001c

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c82:	f000 fb4d 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c86:	f000 f8bd 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8a:	f000 f943 	bl	8000f14 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c8e:	f000 f8f5 	bl	8000e7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c92:	4851      	ldr	r0, [pc, #324]	; (8000dd8 <main+0x15c>)
 8000c94:	f001 fa8c 	bl	80021b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int index_led = 0 ;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  int matrix_led = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
  setTimer0(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f000 f99d 	bl	8000fe0 <setTimer0>
  setTimer1(100);
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f000 f9b4 	bl	8001014 <setTimer1>
  setTimer2(100);
 8000cac:	2064      	movs	r0, #100	; 0x64
 8000cae:	f000 f9cb 	bl	8001048 <setTimer2>
  setTimer3(100);	// update the display matrix led
 8000cb2:	2064      	movs	r0, #100	; 0x64
 8000cb4:	f000 f9e2 	bl	800107c <setTimer3>
  setTimer4(100);	// for the buffer_matrix update
 8000cb8:	2064      	movs	r0, #100	; 0x64
 8000cba:	f000 f9f9 	bl	80010b0 <setTimer4>
   * 0 1 1 1 1 1 1 0
   * 0 1 1 1 1 1 1 0
   * 0 1 1 0 0 1 1 0
   * 0 1 1 0 0 1 1 0
   */
  matrix_buffer[0] = 0x00;
 8000cbe:	4b47      	ldr	r3, [pc, #284]	; (8000ddc <main+0x160>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]
  matrix_buffer[1] = 0xc0;
 8000cc4:	4b45      	ldr	r3, [pc, #276]	; (8000ddc <main+0x160>)
 8000cc6:	22c0      	movs	r2, #192	; 0xc0
 8000cc8:	705a      	strb	r2, [r3, #1]
  matrix_buffer[2] = 0x80;
 8000cca:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <main+0x160>)
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	709a      	strb	r2, [r3, #2]
  matrix_buffer[3] = 0x33;
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <main+0x160>)
 8000cd2:	2233      	movs	r2, #51	; 0x33
 8000cd4:	70da      	strb	r2, [r3, #3]
  matrix_buffer[4] = 0x33;
 8000cd6:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <main+0x160>)
 8000cd8:	2233      	movs	r2, #51	; 0x33
 8000cda:	711a      	strb	r2, [r3, #4]
  matrix_buffer[5] = 0x80;
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <main+0x160>)
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	715a      	strb	r2, [r3, #5]
  matrix_buffer[6] = 0xc0;
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <main+0x160>)
 8000ce4:	22c0      	movs	r2, #192	; 0xc0
 8000ce6:	719a      	strb	r2, [r3, #6]
  matrix_buffer[7] = 0x00;
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <main+0x160>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	71da      	strb	r2, [r3, #7]

  while (1)
  {
		if ( timer0_flag == 1) {
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <main+0x164>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d134      	bne.n	8000d60 <main+0xe4>
			HAL_GPIO_TogglePin ( LED_RED_GPIO_Port, LED_RED_Pin ) ;
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	483a      	ldr	r0, [pc, #232]	; (8000de4 <main+0x168>)
 8000cfa:	f000 fe13 	bl	8001924 <HAL_GPIO_TogglePin>
			setTimer0 (1000) ;
 8000cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d02:	f000 f96d 	bl	8000fe0 <setTimer0>
			second++;
 8000d06:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <main+0x16c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <main+0x16c>)
 8000d0e:	6013      	str	r3, [r2, #0]
			if (second >= 60) {
 8000d10:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <main+0x16c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b3b      	cmp	r3, #59	; 0x3b
 8000d16:	dd07      	ble.n	8000d28 <main+0xac>
				second = 0;
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <main+0x16c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
				minute++;
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <main+0x170>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a31      	ldr	r2, [pc, #196]	; (8000dec <main+0x170>)
 8000d26:	6013      	str	r3, [r2, #0]
			}

			if (minute >= 60) {
 8000d28:	4b30      	ldr	r3, [pc, #192]	; (8000dec <main+0x170>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d2e:	dd07      	ble.n	8000d40 <main+0xc4>
				minute = 0;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <main+0x170>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
				hour++;
 8000d36:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <main+0x174>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	4a2c      	ldr	r2, [pc, #176]	; (8000df0 <main+0x174>)
 8000d3e:	6013      	str	r3, [r2, #0]
			}

			if (hour >= 24) {
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <main+0x174>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b17      	cmp	r3, #23
 8000d46:	dd02      	ble.n	8000d4e <main+0xd2>
				hour = 0;
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <main+0x174>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
			}
			updateClockBuffer(hour,minute,second);
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <main+0x174>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a26      	ldr	r2, [pc, #152]	; (8000dec <main+0x170>)
 8000d54:	6811      	ldr	r1, [r2, #0]
 8000d56:	4a24      	ldr	r2, [pc, #144]	; (8000de8 <main+0x16c>)
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fc48 	bl	80005f0 <updateClockBuffer>

		}

		if ( timer1_flag == 1) {
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <main+0x178>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d10d      	bne.n	8000d84 <main+0x108>
			update7SEG(index_led++);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fba0 	bl	80004b4 <update7SEG>
			if (index_led >= 4) index_led = 0;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	dd01      	ble.n	8000d7e <main+0x102>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
			setTimer1(250);
 8000d7e:	20fa      	movs	r0, #250	; 0xfa
 8000d80:	f000 f948 	bl	8001014 <setTimer1>
		}

		if ( timer2_flag == 1) {
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <main+0x17c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d107      	bne.n	8000d9c <main+0x120>

			HAL_GPIO_TogglePin ( DOT_GPIO_Port, DOT_Pin ) ;
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	4815      	ldr	r0, [pc, #84]	; (8000de4 <main+0x168>)
 8000d90:	f000 fdc8 	bl	8001924 <HAL_GPIO_TogglePin>
			setTimer2 (500) ;
 8000d94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d98:	f000 f956 	bl	8001048 <setTimer2>
		}
		if ( timer3_flag == 1) {
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <main+0x180>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d10d      	bne.n	8000dc0 <main+0x144>
			updateLEDMatrix(matrix_led++);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	603a      	str	r2, [r7, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fd70 	bl	8000890 <updateLEDMatrix>
			if (matrix_led>=8) matrix_led = 0;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b07      	cmp	r3, #7
 8000db4:	dd01      	ble.n	8000dba <main+0x13e>
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]

			setTimer3(50) ;
 8000dba:	2032      	movs	r0, #50	; 0x32
 8000dbc:	f000 f95e 	bl	800107c <setTimer3>
		}
		if ( timer4_flag == 1) {
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <main+0x184>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d192      	bne.n	8000cee <main+0x72>
			updateMatrix_Buffer();
 8000dc8:	f7ff ff36 	bl	8000c38 <updateMatrix_Buffer>
			setTimer4(8*50) ;
 8000dcc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000dd0:	f000 f96e 	bl	80010b0 <setTimer4>
		if ( timer0_flag == 1) {
 8000dd4:	e78b      	b.n	8000cee <main+0x72>
 8000dd6:	bf00      	nop
 8000dd8:	2000007c 	.word	0x2000007c
 8000ddc:	2000001c 	.word	0x2000001c
 8000de0:	20000024 	.word	0x20000024
 8000de4:	40010800 	.word	0x40010800
 8000de8:	20000018 	.word	0x20000018
 8000dec:	20000014 	.word	0x20000014
 8000df0:	20000010 	.word	0x20000010
 8000df4:	20000028 	.word	0x20000028
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	20000030 	.word	0x20000030
 8000e00:	20000034 	.word	0x20000034

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b090      	sub	sp, #64	; 0x40
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2228      	movs	r2, #40	; 0x28
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f001 fd88 	bl	8002928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fd8c 	bl	8001958 <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e46:	f000 f8c5 	bl	8000fd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fff8 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 f8b1 	bl	8000fd4 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3740      	adds	r7, #64	; 0x40
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ea2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000eb0:	2209      	movs	r2, #9
 8000eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ec2:	f001 f925 	bl	8002110 <HAL_TIM_Base_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ecc:	f000 f882 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ede:	f001 fabb 	bl	8002458 <HAL_TIM_ConfigClockSource>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ee8:	f000 f874 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000efa:	f001 fc87 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f04:	f000 f866 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000007c 	.word	0x2000007c

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_GPIO_Init+0xa0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <MX_GPIO_Init+0xa0>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0xa0>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_GPIO_Init+0xa0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <MX_GPIO_Init+0xa0>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_GPIO_Init+0xa0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <MX_GPIO_Init+0xa4>)
 8000f60:	f000 fcc8 	bl	80018f4 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|ROW2_Pin
 8000f64:	2200      	movs	r2, #0
 8000f66:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <MX_GPIO_Init+0xa8>)
 8000f6c:	f000 fcc2 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000f70:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000f74:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4619      	mov	r1, r3
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <MX_GPIO_Init+0xa4>)
 8000f8a:	f000 fb39 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin d_Pin e_Pin f_Pin
                           g_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|ROW2_Pin
 8000f8e:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000f92:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_GPIO_Init+0xa8>)
 8000fa8:	f000 fb2a 	bl	8001600 <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40010c00 	.word	0x40010c00

08000fc0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	timer_run();
 8000fc8:	f000 f88c 	bl	80010e4 <timer_run>

}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <setTimer0>:
int timer1_flag = 1;
int timer2_flag = 1;
int timer3_flag = 1;
int timer4_flag = 1;
int TIMER_CYCLE = 10;
void setTimer0(int duration){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	timer0_counter = duration /TIMER_CYCLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <setTimer0+0x28>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ff2:	4a06      	ldr	r2, [pc, #24]	; (800100c <setTimer0+0x2c>)
 8000ff4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <setTimer0+0x30>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000038 	.word	0x20000038
 800100c:	20000068 	.word	0x20000068
 8001010:	20000024 	.word	0x20000024

08001014 <setTimer1>:
void setTimer1(int duration){
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration /TIMER_CYCLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <setTimer1+0x28>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	fb92 f3f3 	sdiv	r3, r2, r3
 8001026:	4a06      	ldr	r2, [pc, #24]	; (8001040 <setTimer1+0x2c>)
 8001028:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <setTimer1+0x30>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000038 	.word	0x20000038
 8001040:	2000006c 	.word	0x2000006c
 8001044:	20000028 	.word	0x20000028

08001048 <setTimer2>:
void setTimer2(int duration){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration /TIMER_CYCLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <setTimer2+0x28>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	fb92 f3f3 	sdiv	r3, r2, r3
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <setTimer2+0x2c>)
 800105c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <setTimer2+0x30>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000038 	.word	0x20000038
 8001074:	20000070 	.word	0x20000070
 8001078:	2000002c 	.word	0x2000002c

0800107c <setTimer3>:
void setTimer3(int duration){
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <setTimer3+0x28>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	fb92 f3f3 	sdiv	r3, r2, r3
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <setTimer3+0x2c>)
 8001090:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <setTimer3+0x30>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000038 	.word	0x20000038
 80010a8:	20000074 	.word	0x20000074
 80010ac:	20000030 	.word	0x20000030

080010b0 <setTimer4>:
void setTimer4(int duration){
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <setTimer4+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <setTimer4+0x2c>)
 80010c4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <setTimer4+0x30>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000038 	.word	0x20000038
 80010dc:	20000078 	.word	0x20000078
 80010e0:	20000034 	.word	0x20000034

080010e4 <timer_run>:
void timer_run(){
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	if ( timer0_counter > 0) {
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <timer_run+0xac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dd0b      	ble.n	8001108 <timer_run+0x24>
		timer0_counter--;
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <timer_run+0xac>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <timer_run+0xac>)
 80010f8:	6013      	str	r3, [r2, #0]
		if ( timer0_counter == 0) timer0_flag = 1;
 80010fa:	4b25      	ldr	r3, [pc, #148]	; (8001190 <timer_run+0xac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <timer_run+0x24>
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <timer_run+0xb0>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
	}

	if ( timer1_counter > 0) {
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <timer_run+0xb4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dd0b      	ble.n	8001128 <timer_run+0x44>
		timer1_counter--;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <timer_run+0xb4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <timer_run+0xb4>)
 8001118:	6013      	str	r3, [r2, #0]
		if ( timer1_counter == 0) timer1_flag = 1;
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <timer_run+0xb4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <timer_run+0x44>
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <timer_run+0xb8>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
	}

	if ( timer2_counter > 0) {
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <timer_run+0xbc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd0b      	ble.n	8001148 <timer_run+0x64>
		timer2_counter--;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <timer_run+0xbc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <timer_run+0xbc>)
 8001138:	6013      	str	r3, [r2, #0]
		if ( timer2_counter == 0) timer2_flag = 1;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <timer_run+0xbc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <timer_run+0x64>
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <timer_run+0xc0>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
	}
	if ( timer3_counter > 0) {
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <timer_run+0xc4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dd0b      	ble.n	8001168 <timer_run+0x84>
		timer3_counter--;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <timer_run+0xc4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <timer_run+0xc4>)
 8001158:	6013      	str	r3, [r2, #0]
		if ( timer3_counter == 0) timer3_flag = 1;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <timer_run+0xc4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <timer_run+0x84>
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <timer_run+0xc8>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
	}
	if ( timer4_counter > 0) {
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <timer_run+0xcc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd0b      	ble.n	8001188 <timer_run+0xa4>
		timer4_counter--;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <timer_run+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <timer_run+0xcc>)
 8001178:	6013      	str	r3, [r2, #0]
		if ( timer4_counter == 0) timer4_flag = 1;
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <timer_run+0xcc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <timer_run+0xa4>
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <timer_run+0xd0>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
	}
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	20000068 	.word	0x20000068
 8001194:	20000024 	.word	0x20000024
 8001198:	2000006c 	.word	0x2000006c
 800119c:	20000028 	.word	0x20000028
 80011a0:	20000070 	.word	0x20000070
 80011a4:	2000002c 	.word	0x2000002c
 80011a8:	20000074 	.word	0x20000074
 80011ac:	20000030 	.word	0x20000030
 80011b0:	20000078 	.word	0x20000078
 80011b4:	20000034 	.word	0x20000034

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_MspInit+0x5c>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_MspInit+0x5c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_MspInit+0x5c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x5c>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x5c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x5c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_MspInit+0x60>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_MspInit+0x60>)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201c      	movs	r0, #28
 800124c:	f000 f9a1 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001250:	201c      	movs	r0, #28
 8001252:	f000 f9ba 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 f87f 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM2_IRQHandler+0x10>)
 80012ba:	f000 ffc5 	bl	8002248 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000007c 	.word	0x2000007c

080012c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d4:	f7ff fff8 	bl	80012c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012da:	490c      	ldr	r1, [pc, #48]	; (800130c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f0:	4c09      	ldr	r4, [pc, #36]	; (8001318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fe:	f001 faef 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001302:	f7ff fcbb 	bl	8000c7c <main>
  bx lr
 8001306:	4770      	bx	lr
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001310:	0800297c 	.word	0x0800297c
  ldr r2, =_sbss
 8001314:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001318:	200000c8 	.word	0x200000c8

0800131c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_2_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_Init+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x28>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f923 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	200f      	movs	r0, #15
 8001338:	f000 f808 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff ff3c 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f93b 	bl	80015e6 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f903 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000003c 	.word	0x2000003c
 80013a4:	20000044 	.word	0x20000044
 80013a8:	20000040 	.word	0x20000040

080013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_IncTick+0x1c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x20>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <HAL_IncTick+0x20>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000044 	.word	0x20000044
 80013cc:	200000c4 	.word	0x200000c4

080013d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b02      	ldr	r3, [pc, #8]	; (80013e0 <HAL_GetTick+0x10>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	200000c4 	.word	0x200000c4

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4906      	ldr	r1, [pc, #24]	; (800147c <__NVIC_EnableIRQ+0x34>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff90 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff2d 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff42 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff90 	bl	80014d4 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5f 	bl	8001480 <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff35 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e148      	b.n	80018a6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001614:	2201      	movs	r2, #1
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 8137 	bne.w	80018a0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4aa3      	ldr	r2, [pc, #652]	; (80018c4 <HAL_GPIO_Init+0x2c4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d05e      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 800163c:	4aa1      	ldr	r2, [pc, #644]	; (80018c4 <HAL_GPIO_Init+0x2c4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d875      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 8001642:	4aa1      	ldr	r2, [pc, #644]	; (80018c8 <HAL_GPIO_Init+0x2c8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d058      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 8001648:	4a9f      	ldr	r2, [pc, #636]	; (80018c8 <HAL_GPIO_Init+0x2c8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d86f      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 800164e:	4a9f      	ldr	r2, [pc, #636]	; (80018cc <HAL_GPIO_Init+0x2cc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d052      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 8001654:	4a9d      	ldr	r2, [pc, #628]	; (80018cc <HAL_GPIO_Init+0x2cc>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d869      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 800165a:	4a9d      	ldr	r2, [pc, #628]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d04c      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 8001660:	4a9b      	ldr	r2, [pc, #620]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d863      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 8001666:	4a9b      	ldr	r2, [pc, #620]	; (80018d4 <HAL_GPIO_Init+0x2d4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d046      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
 800166c:	4a99      	ldr	r2, [pc, #612]	; (80018d4 <HAL_GPIO_Init+0x2d4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d85d      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 8001672:	2b12      	cmp	r3, #18
 8001674:	d82a      	bhi.n	80016cc <HAL_GPIO_Init+0xcc>
 8001676:	2b12      	cmp	r3, #18
 8001678:	d859      	bhi.n	800172e <HAL_GPIO_Init+0x12e>
 800167a:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <HAL_GPIO_Init+0x80>)
 800167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001680:	080016fb 	.word	0x080016fb
 8001684:	080016d5 	.word	0x080016d5
 8001688:	080016e7 	.word	0x080016e7
 800168c:	08001729 	.word	0x08001729
 8001690:	0800172f 	.word	0x0800172f
 8001694:	0800172f 	.word	0x0800172f
 8001698:	0800172f 	.word	0x0800172f
 800169c:	0800172f 	.word	0x0800172f
 80016a0:	0800172f 	.word	0x0800172f
 80016a4:	0800172f 	.word	0x0800172f
 80016a8:	0800172f 	.word	0x0800172f
 80016ac:	0800172f 	.word	0x0800172f
 80016b0:	0800172f 	.word	0x0800172f
 80016b4:	0800172f 	.word	0x0800172f
 80016b8:	0800172f 	.word	0x0800172f
 80016bc:	0800172f 	.word	0x0800172f
 80016c0:	0800172f 	.word	0x0800172f
 80016c4:	080016dd 	.word	0x080016dd
 80016c8:	080016f1 	.word	0x080016f1
 80016cc:	4a82      	ldr	r2, [pc, #520]	; (80018d8 <HAL_GPIO_Init+0x2d8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d013      	beq.n	80016fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016d2:	e02c      	b.n	800172e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	623b      	str	r3, [r7, #32]
          break;
 80016da:	e029      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	3304      	adds	r3, #4
 80016e2:	623b      	str	r3, [r7, #32]
          break;
 80016e4:	e024      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	3308      	adds	r3, #8
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e01f      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	330c      	adds	r3, #12
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e01a      	b.n	8001730 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001702:	2304      	movs	r3, #4
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e013      	b.n	8001730 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001710:	2308      	movs	r3, #8
 8001712:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	611a      	str	r2, [r3, #16]
          break;
 800171a:	e009      	b.n	8001730 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800171c:	2308      	movs	r3, #8
 800171e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	615a      	str	r2, [r3, #20]
          break;
 8001726:	e003      	b.n	8001730 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
          break;
 800172c:	e000      	b.n	8001730 <HAL_GPIO_Init+0x130>
          break;
 800172e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d801      	bhi.n	800173a <HAL_GPIO_Init+0x13a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	e001      	b.n	800173e <HAL_GPIO_Init+0x13e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3304      	adds	r3, #4
 800173e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	2bff      	cmp	r3, #255	; 0xff
 8001744:	d802      	bhi.n	800174c <HAL_GPIO_Init+0x14c>
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	e002      	b.n	8001752 <HAL_GPIO_Init+0x152>
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	3b08      	subs	r3, #8
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	210f      	movs	r1, #15
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	6a39      	ldr	r1, [r7, #32]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	431a      	orrs	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8090 	beq.w	80018a0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001780:	4b56      	ldr	r3, [pc, #344]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a55      	ldr	r2, [pc, #340]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001798:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_GPIO_Init+0x2e0>)
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	220f      	movs	r2, #15
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a49      	ldr	r2, [pc, #292]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d00d      	beq.n	80017e0 <HAL_GPIO_Init+0x1e0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a48      	ldr	r2, [pc, #288]	; (80018e8 <HAL_GPIO_Init+0x2e8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d007      	beq.n	80017dc <HAL_GPIO_Init+0x1dc>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a47      	ldr	r2, [pc, #284]	; (80018ec <HAL_GPIO_Init+0x2ec>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_GPIO_Init+0x1d8>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e004      	b.n	80017e2 <HAL_GPIO_Init+0x1e2>
 80017d8:	2303      	movs	r3, #3
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x1e2>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_GPIO_Init+0x1e2>
 80017e0:	2300      	movs	r3, #0
 80017e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e4:	f002 0203 	and.w	r2, r2, #3
 80017e8:	0092      	lsls	r2, r2, #2
 80017ea:	4093      	lsls	r3, r2
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f2:	493b      	ldr	r1, [pc, #236]	; (80018e0 <HAL_GPIO_Init+0x2e0>)
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800180c:	4b38      	ldr	r3, [pc, #224]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	4937      	ldr	r1, [pc, #220]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800181a:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	4933      	ldr	r1, [pc, #204]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001824:	4013      	ands	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001834:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	492d      	ldr	r1, [pc, #180]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	43db      	mvns	r3, r3
 800184a:	4929      	ldr	r1, [pc, #164]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800184c:	4013      	ands	r3, r2
 800184e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d006      	beq.n	800186a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800185c:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4923      	ldr	r1, [pc, #140]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	43db      	mvns	r3, r3
 8001872:	491f      	ldr	r1, [pc, #124]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001874:	4013      	ands	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4919      	ldr	r1, [pc, #100]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4915      	ldr	r1, [pc, #84]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 800189c:	4013      	ands	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	3301      	adds	r3, #1
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f47f aeaf 	bne.w	8001614 <HAL_GPIO_Init+0x14>
  }
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	372c      	adds	r7, #44	; 0x2c
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	10320000 	.word	0x10320000
 80018c8:	10310000 	.word	0x10310000
 80018cc:	10220000 	.word	0x10220000
 80018d0:	10210000 	.word	0x10210000
 80018d4:	10120000 	.word	0x10120000
 80018d8:	10110000 	.word	0x10110000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	40010800 	.word	0x40010800
 80018e8:	40010c00 	.word	0x40010c00
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001910:	e003      	b.n	800191a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43d9      	mvns	r1, r3
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	400b      	ands	r3, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
	...

08001958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e26c      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8087 	beq.w	8001a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001978:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b04      	cmp	r3, #4
 8001982:	d00c      	beq.n	800199e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001984:	4b8f      	ldr	r3, [pc, #572]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b08      	cmp	r3, #8
 800198e:	d112      	bne.n	80019b6 <HAL_RCC_OscConfig+0x5e>
 8001990:	4b8c      	ldr	r3, [pc, #560]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d10b      	bne.n	80019b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199e:	4b89      	ldr	r3, [pc, #548]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d06c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x12c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d168      	bne.n	8001a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e246      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x76>
 80019c0:	4b80      	ldr	r3, [pc, #512]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a7f      	ldr	r2, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e02e      	b.n	8001a2c <HAL_RCC_OscConfig+0xd4>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x98>
 80019d6:	4b7b      	ldr	r3, [pc, #492]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7a      	ldr	r2, [pc, #488]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b78      	ldr	r3, [pc, #480]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a77      	ldr	r2, [pc, #476]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e01d      	b.n	8001a2c <HAL_RCC_OscConfig+0xd4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0xbc>
 80019fa:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a71      	ldr	r2, [pc, #452]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6e      	ldr	r2, [pc, #440]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0xd4>
 8001a14:	4b6b      	ldr	r3, [pc, #428]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a6a      	ldr	r2, [pc, #424]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a67      	ldr	r2, [pc, #412]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fccc 	bl	80013d0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fcc8 	bl	80013d0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1fa      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0xe4>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fcb8 	bl	80013d0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fcb4 	bl	80013d0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1e6      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x10c>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a9e:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d11c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x18c>
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x176>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e1ba      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4939      	ldr	r1, [pc, #228]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	e03a      	b.n	8001b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fc6d 	bl	80013d0 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff fc69 	bl	80013d0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e19b      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4927      	ldr	r1, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
 8001b2c:	e015      	b.n	8001b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fc4c 	bl	80013d0 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fc48 	bl	80013d0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e17a      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d03a      	beq.n	8001bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d019      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b74:	f7ff fc2c 	bl	80013d0 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fc28 	bl	80013d0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e15a      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 fa9a 	bl	80020d4 <RCC_Delay>
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fc12 	bl	80013d0 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bae:	e00f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fc0e 	bl	80013d0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d908      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e140      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	42420000 	.word	0x42420000
 8001bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	4b9e      	ldr	r3, [pc, #632]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e9      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a6 	beq.w	8001d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bee:	4b97      	ldr	r3, [pc, #604]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10d      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b94      	ldr	r3, [pc, #592]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a93      	ldr	r2, [pc, #588]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b91      	ldr	r3, [pc, #580]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a8a      	ldr	r2, [pc, #552]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fbcf 	bl	80013d0 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff fbcb 	bl	80013d0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b64      	cmp	r3, #100	; 0x64
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0fd      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x312>
 8001c5c:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a7a      	ldr	r2, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x334>
 8001c72:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4a75      	ldr	r2, [pc, #468]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6213      	str	r3, [r2, #32]
 8001c7e:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a72      	ldr	r2, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	e01c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x36e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d10c      	bne.n	8001cae <HAL_RCC_OscConfig+0x356>
 8001c94:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a6c      	ldr	r2, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a69      	ldr	r2, [pc, #420]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e00b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x36e>
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a66      	ldr	r2, [pc, #408]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d015      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fb7f 	bl	80013d0 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff fb7b 	bl	80013d0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0ab      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cec:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ee      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x37e>
 8001cf8:	e014      	b.n	8001d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fb69 	bl	80013d0 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff fb65 	bl	80013d0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e095      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ee      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d105      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2a:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a47      	ldr	r2, [pc, #284]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8081 	beq.w	8001e42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d40:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d061      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d146      	bne.n	8001de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0x4fc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fb39 	bl	80013d0 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff fb35 	bl	80013d0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e067      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d108      	bne.n	8001d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	492d      	ldr	r1, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a19      	ldr	r1, [r3, #32]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	430b      	orrs	r3, r1
 8001dae:	4927      	ldr	r1, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x4fc>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fb09 	bl	80013d0 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7ff fb05 	bl	80013d0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e037      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46a>
 8001de0:	e02f      	b.n	8001e42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_RCC_OscConfig+0x4fc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff faf2 	bl	80013d0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff faee 	bl	80013d0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e020      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x498>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e013      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	42420060 	.word	0x42420060

08001e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0d0      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d910      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 0207 	bic.w	r2, r3, #7
 8001e82:	4965      	ldr	r1, [pc, #404]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0b8      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	494d      	ldr	r1, [pc, #308]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d040      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d115      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e07f      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e073      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06b      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4936      	ldr	r1, [pc, #216]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff fa42 	bl	80013d0 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff fa3e 	bl	80013d0 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e053      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d210      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4922      	ldr	r1, [pc, #136]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e032      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4916      	ldr	r1, [pc, #88]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	490e      	ldr	r1, [pc, #56]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe6:	f000 f821 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	490a      	ldr	r1, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	5ccb      	ldrb	r3, [r1, r3]
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1cc>)
 8002000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1d0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff f9a0 	bl	800134c <HAL_InitTick>

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
 8002020:	08002950 	.word	0x08002950
 8002024:	2000003c 	.word	0x2000003c
 8002028:	20000040 	.word	0x20000040

0800202c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002046:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b04      	cmp	r3, #4
 8002054:	d002      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x30>
 8002056:	2b08      	cmp	r3, #8
 8002058:	d003      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x36>
 800205a:	e027      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	e027      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	0c9b      	lsrs	r3, r3, #18
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800206c:	5cd3      	ldrb	r3, [r2, r3]
 800206e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	0c5b      	lsrs	r3, r3, #17
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800208e:	fb02 f203 	mul.w	r2, r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e004      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	613b      	str	r3, [r7, #16]
      break;
 80020aa:	e002      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ae:	613b      	str	r3, [r7, #16]
      break;
 80020b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b2:	693b      	ldr	r3, [r7, #16]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	007a1200 	.word	0x007a1200
 80020c8:	08002960 	.word	0x08002960
 80020cc:	08002970 	.word	0x08002970
 80020d0:	003d0900 	.word	0x003d0900

080020d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <RCC_Delay+0x34>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <RCC_Delay+0x38>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0a5b      	lsrs	r3, r3, #9
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020f0:	bf00      	nop
  }
  while (Delay --);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e5a      	subs	r2, r3, #1
 80020f6:	60fa      	str	r2, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f9      	bne.n	80020f0 <RCC_Delay+0x1c>
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	2000003c 	.word	0x2000003c
 800210c:	10624dd3 	.word	0x10624dd3

08002110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e041      	b.n	80021a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff f870 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3304      	adds	r3, #4
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f000 fa6e 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d001      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e035      	b.n	8002234 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <HAL_TIM_Base_Start_IT+0x90>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x4e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f2:	d004      	beq.n	80021fe <HAL_TIM_Base_Start_IT+0x4e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_TIM_Base_Start_IT+0x94>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d111      	bne.n	8002222 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b06      	cmp	r3, #6
 800220e:	d010      	beq.n	8002232 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002220:	e007      	b.n	8002232 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40000400 	.word	0x40000400

08002248 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b02      	cmp	r3, #2
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0202 	mvn.w	r2, #2
 8002274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f9b4 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f9a7 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f9b6 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0204 	mvn.w	r2, #4
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f98a 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f97d 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f98c 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b08      	cmp	r3, #8
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b08      	cmp	r3, #8
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0208 	mvn.w	r2, #8
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2204      	movs	r2, #4
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f960 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f953 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f962 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b10      	cmp	r3, #16
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b10      	cmp	r3, #16
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0210 	mvn.w	r2, #16
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2208      	movs	r2, #8
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f936 	bl	80025f8 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f929 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f938 	bl	800260a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10e      	bne.n	80023cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0201 	mvn.w	r2, #1
 80023c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe fdfa 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d6:	2b80      	cmp	r3, #128	; 0x80
 80023d8:	d10e      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e4:	2b80      	cmp	r3, #128	; 0x80
 80023e6:	d107      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa6b 	bl	80028ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002402:	2b40      	cmp	r3, #64	; 0x40
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f8fc 	bl	800261c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b20      	cmp	r3, #32
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b20      	cmp	r3, #32
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0220 	mvn.w	r2, #32
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa36 	bl	80028bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_TIM_ConfigClockSource+0x1c>
 8002470:	2302      	movs	r3, #2
 8002472:	e0b4      	b.n	80025de <HAL_TIM_ConfigClockSource+0x186>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800249a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ac:	d03e      	beq.n	800252c <HAL_TIM_ConfigClockSource+0xd4>
 80024ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b2:	f200 8087 	bhi.w	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	f000 8086 	beq.w	80025ca <HAL_TIM_ConfigClockSource+0x172>
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c2:	d87f      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b70      	cmp	r3, #112	; 0x70
 80024c6:	d01a      	beq.n	80024fe <HAL_TIM_ConfigClockSource+0xa6>
 80024c8:	2b70      	cmp	r3, #112	; 0x70
 80024ca:	d87b      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b60      	cmp	r3, #96	; 0x60
 80024ce:	d050      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x11a>
 80024d0:	2b60      	cmp	r3, #96	; 0x60
 80024d2:	d877      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b50      	cmp	r3, #80	; 0x50
 80024d6:	d03c      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xfa>
 80024d8:	2b50      	cmp	r3, #80	; 0x50
 80024da:	d873      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d058      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x13a>
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d86f      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b30      	cmp	r3, #48	; 0x30
 80024e6:	d064      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	2b30      	cmp	r3, #48	; 0x30
 80024ea:	d86b      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d060      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	2b20      	cmp	r3, #32
 80024f2:	d867      	bhi.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d05a      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0x15a>
 80024fc:	e062      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6899      	ldr	r1, [r3, #8]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f000 f95e 	bl	80027ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	609a      	str	r2, [r3, #8]
      break;
 800252a:	e04f      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6899      	ldr	r1, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f000 f947 	bl	80027ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800254e:	609a      	str	r2, [r3, #8]
      break;
 8002550:	e03c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	461a      	mov	r2, r3
 8002560:	f000 f8be 	bl	80026e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2150      	movs	r1, #80	; 0x50
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f915 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002570:	e02c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f8dc 	bl	800273c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2160      	movs	r1, #96	; 0x60
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f905 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002590:	e01c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f000 f89e 	bl	80026e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f8f5 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 80025b0:	e00c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	f000 f8ec 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 80025c2:	e003      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      break;
 80025c8:	e000      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
	...

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <TIM_Base_SetConfig+0xa8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x28>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x28>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a22      	ldr	r2, [pc, #136]	; (80026dc <TIM_Base_SetConfig+0xac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <TIM_Base_SetConfig+0xa8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_Base_SetConfig+0x52>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d003      	beq.n	8002682 <TIM_Base_SetConfig+0x52>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <TIM_Base_SetConfig+0xac>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d108      	bne.n	8002694 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <TIM_Base_SetConfig+0xa8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	615a      	str	r2, [r3, #20]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400

080026e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0201 	bic.w	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f023 030a 	bic.w	r3, r3, #10
 800271c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	621a      	str	r2, [r3, #32]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f023 0210 	bic.w	r2, r3, #16
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	031b      	lsls	r3, r3, #12
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002778:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f043 0307 	orr.w	r3, r3, #7
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b087      	sub	sp, #28
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	021a      	lsls	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e041      	b.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d004      	beq.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d10c      	bne.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400

080028bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	2600      	movs	r6, #0
 80028e4:	4d0c      	ldr	r5, [pc, #48]	; (8002918 <__libc_init_array+0x38>)
 80028e6:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	f000 f822 	bl	8002938 <_init>
 80028f4:	2600      	movs	r6, #0
 80028f6:	4d0a      	ldr	r5, [pc, #40]	; (8002920 <__libc_init_array+0x40>)
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <__libc_init_array+0x44>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002974 	.word	0x08002974
 800291c:	08002974 	.word	0x08002974
 8002920:	08002974 	.word	0x08002974
 8002924:	08002978 	.word	0x08002978

08002928 <memset>:
 8002928:	4603      	mov	r3, r0
 800292a:	4402      	add	r2, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
